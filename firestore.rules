
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    function isAdmin() {
      // An admin user has a custom claim 'admin' set to true.
      return request.auth.token.admin == true;
    }
    
    function isOwner(userId) {
      // Check if the requesting user is the owner of the document.
      return request.auth.uid == userId;
    }

    function isTech() {
      return request.auth.token.role == 'Servicios Generales';
    }

    function isRequester() {
       return request.auth.token.role == 'Docentes' || request.auth.token.role == 'Coordinadores' || request.auth.token.role == 'Administrativos';
    }


    // =================================
    // Collection: users
    // =================================
    match /users/{userId} {
      // Admins can read/write any user document.
      // Techs can read other user profiles (needed for assignments/calendar).
      // Any authenticated user can read their own profile.
      allow read: if isAdmin() || isTech() || isOwner(userId);
      
      // Admins can update any user profile.
      // Any authenticated user can update their own profile.
      allow update: if isAdmin() || isOwner(userId);

      // Only admins can create or delete users.
      allow create, delete: if isAdmin();

      // Deny listing the entire collection to non-admins.
      allow list: if isAdmin() || isTech();
    }

    // =================================
    // Collection: tickets
    // =================================
    match /tickets/{ticketId} {
        // Admins can read all tickets.
        // Techs can read tickets assigned to them.
        // Requesters can read tickets they created.
        allow read: if isAdmin() || 
                      (isTech() && resource.data.assignedToIds.hasAny([request.auth.uid])) || 
                      (isOwner(resource.data.requesterId));

        // Any authenticated user can create a ticket.
        allow create: if request.auth != null;

        // Admins can update any field on any ticket.
        // Requesters can update their own tickets IF the status is still 'Abierto'.
        // Techs can update tickets assigned to them.
        allow update: if isAdmin() ||
                       (isOwner(resource.data.requesterId) && resource.data.status == 'Abierto') ||
                       (isTech() && resource.data.assignedToIds.hasAny([request.auth.uid]));
        
        // Only admins can delete tickets.
        allow delete: if isAdmin();
    }

    // =================================
    // Collection: logs
    // =================================
    match /logs/{logId} {
      // Only admins can read the full audit log.
      allow read, list: if isAdmin();

      // Any authenticated user can create a log entry (as this is done by the backend logic).
      // This is a simplified rule; in production, you might restrict this to server-side calls only.
      allow create: if request.auth != null;

      // Logs are immutable.
      allow update, delete: if false;
    }
    
    // =================================
    // Collection: scheduleEvents
    // =================================
    match /scheduleEvents/{eventId} {
       // Admins and Techs can read/write/delete any calendar event.
       allow read, write, delete: if isAdmin() || isTech();
    }

    // =================================
    // Public Collections
    // =================================
    match /zones/{zoneId} {
      // Anyone authenticated can read zones and sites.
      allow read: if request.auth != null;
      // Only admins can modify them.
      allow write: if isAdmin();
    }

    match /sites/{siteId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // =================================
    // Collection: notifications
    // =================================
    match /notifications/{notificationId} {
      // Users can only read, update (mark as read), or delete their own notifications.
      allow read, update, delete: if isOwner(resource.data.userId);

      // Only backend logic should create notifications.
      // This allows any authenticated user to create (since backend uses user's auth).
      allow create: if request.auth != null;
    }
  }
}
