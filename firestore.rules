rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Lee el rol DESDE el doc del usuario autenticado (si existe)
    function myRole() {
      return isSignedIn()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }

    function isRole(role) {
      return myRole() == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function canReadTicket(ticketId) {
      let t = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      // ⚠️ Evitar 'in' sobre null con coalesce
      let assigned = (t.assignedToIds != null) ? t.assignedToIds : [];
      return isRole('Administrador')
          || isRole('SST')
          || (isRole('Servicios Generales') && request.auth.uid in assigned)
          || (isOwner(t.requesterId));
    }

    // USERS
    match /users/{userId} {
      // Leer: dueño, Admin o SST
      allow read: if isSignedIn() && (isOwner(userId) || isRole('Administrador') || isRole('SST'));

      // Listar: solo Admin
      allow list: if isRole('Administrador');

      // Crear: permitir una auto-inicialización segura (una sola vez) por el dueño
      allow create: if isSignedIn()
                    && isOwner(userId)
                    && !exists(/databases/$(database)/documents/users/$(userId))
                    && request.resource.data.keys().hasOnly(
                        ["uid","name","email","avatar","role","createdAt"]
                      )
                    // Rol inicial permitido (nunca Admin/SST/SG por el cliente)
                    && request.resource.data.role in ["Docentes","Coordinadores","Administrativos"]
                    && request.resource.data.uid == request.auth.uid;

      // Actualizar/Eliminar: solo Admin
      allow update, delete: if isRole('Administrador');
    }

    // TICKETS
    match /tickets/{ticketId} {
      allow read: if canReadTicket(ticketId);
      allow create: if isSignedIn();
      allow update: if isRole('Administrador') ||
                    (isRole('Servicios Generales') &&
                      // misma defensa contra null
                      (request.auth.uid in ((resource.data.assignedToIds != null) ? resource.data.assignedToIds : []))
                    );
      // 'list' no concede lectura por sí sola, pero ayuda a queries
      allow list: if isSignedIn();
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isRole('Servicios Generales');
      allow update, delete: if isRole('Administrador');
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isSignedIn();
      allow list: if isSignedIn();
    }

    // LOGS
    match /logs/{logId} {
      // Defender cuando no hay details o ticketId
      allow read: if isRole('Administrador')
               || isRole('SST')
               || (resource.data.details != null
                   && resource.data.details.ticketId != null
                   && canReadTicket(resource.data.details.ticketId));
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow write: if false;
    }

    // ZONES / SITES / CATEGORIES
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    // DIAGNOSIS LOGS
    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
