rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to make rules more readable
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function canReadTicket(ticketId) {
      let ticket = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      return isRole('Administrador') || isRole('SST') || 
             (isRole('Servicios Generales') && request.auth.uid in ticket.assignedToIds) ||
             (isOwner(ticket.requesterId));
    }
    
    // USERS: Only admins can manage users, but users can read their own profile.
    match /users/{userId} {
      allow read: if isSignedIn() && (isRole('Administrador') || isOwner(userId));
      allow list: if isRole('Administrador'); // Admins can list users to assign tickets
      allow write: if isRole('Administrador');
      allow create: if isRole('Administrador');
    }

    // TICKETS: Handles all ticket-related operations
    match /tickets/{ticketId} {
      allow read: if canReadTicket(ticketId);
      allow create: if isSignedIn();
      allow update: if isRole('Administrador') || (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds);
      allow list: if isSignedIn(); // Allow list queries for any signed-in user, client-side queries will filter the data.
    }
    
    // SCHEDULE EVENTS: Admins or assigned technicians can manage events
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isRole('Servicios Generales');
      allow update, delete: if isRole('Administrador');
    }
    
    // NOTIFICATIONS: Users can only see their own notifications. System writes them.
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isSignedIn(); // Server-side logic or functions will create notifications
      allow list: if isSignedIn(); // Allow users to query their own notifications
    }
    
    // LOGS: Read-only for authorized users. Created by the server.
    match /logs/{logId} {
      allow read: if canReadTicket(resource.data.details.ticketId);
      allow list: if isSignedIn(); // Allow queries, read rule will secure documents.
      allow create: if isSignedIn(); // Allow server-side functions to write logs
      allow write: if false; // Logs are immutable
    }

    // DATA MASTER (ZONES, SITES, CATEGORIES): Admin-managed
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    // DIAGNOSIS LOGS: Allow any authenticated user to write for testing purposes.
    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
