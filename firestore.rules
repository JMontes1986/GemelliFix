rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Úsalo en colecciones que NO sean /users/{request.auth.uid}
    function isRole(role) {
      return isSignedIn()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Opcional si más adelante pones custom claims:
    function isAdminClaim() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    // Evita recursión usando esta función SOLO fuera de /users/{request.auth.uid}
    function isAdmin() {
      return isAdminClaim() || isRole('Administrador');
    }
    
    function isSST() { return isRole('SST'); }
    function isTech() { return isRole('Servicios Generales'); }

    // ========= USERS =========
    match /users/{userId} {
      // El dueño SIEMPRE puede leer su doc (evita recursión con isRole)
      // y permitido a admin cuando lee docs de OTROS
      allow get: if isOwner(userId) || (userId != request.auth.uid && isAdmin());

      // List/queries solo admin
      allow list: if isAdmin();

      // Crear doc inicial: dueño o admin
      allow create: if isOwner(userId) || isAdmin();

      // Actualizar: dueño o admin (opcional: añade validaciones de campos)
      allow update: if isOwner(userId) || isAdmin();

      // Borrar: solo admin
      allow delete: if isAdmin();
    }

    // ========= TICKETS =========
    function canReadTicket(ticketId) {
      let t = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      return isRole('Administrador')
          || isRole('SST')
          || (isRole('Servicios Generales') && request.auth.uid in (t.assignedToIds || []))
          || (isOwner(t.requesterId));
    }

    match /tickets/{ticketId} {
      allow read: if canReadTicket(ticketId);
      allow create: if isSignedIn();
      allow update: if isRole('Administrador')
                 || (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds);
      // Las queries (list) siguen abiertas a autenticados, pero la regla read filtra por doc.
      allow list: if isSignedIn();
    }

    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isRole('Servicios Generales');
      allow update, delete: if isRole('Administrador');
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create, list: if isSignedIn();
    }

    match /logs/{logId} {
      allow read: if canReadTicket(resource.data.details.ticketId);
      allow list, create: if isSignedIn();
      allow write: if false;
    }

    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
