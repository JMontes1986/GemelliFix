rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function userRole(uid) {
      // This helper is safe to use in rules for OTHER collections.
      // Avoid using it inside `match /users/{userId}` to prevent recursion.
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && userRole(request.auth.uid) == 'Administrador';
    }
    
    function isSST() {
        return isSignedIn() && userRole(request.auth.uid) == 'SST';
    }

    function isTech() {
        return isSignedIn() && userRole(request.auth.uid) == 'Servicios Generales';
    }

    // A helper to check another ticket's readability.
    // Safe because it's not self-referential to the resource being read.
    function canReadTicketById(ticketId) {
      let ticketData = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      let assignedIds = ticketData.assignedToIds || [];
      return isAdmin() 
          || isSST() 
          || (isTech() && request.auth.uid in assignedIds)
          || isOwner(ticketData.requesterId);
    }

    // ========= USERS (No Recursion) =========
    match /users/{userId} {
      // An authenticated user can always read, create, and update their OWN profile.
      // This is the key fix to prevent the permission denied loop on login/signup.
      allow get, create, update: if request.auth.uid == userId;

      // Only an admin can LIST all users (for the settings page).
      allow list: if isAdmin();
      
      // Only an admin can delete a user.
      allow delete: if isAdmin();
    }

    // ========= TICKETS =========
    match /tickets/{ticketId} {
      // GET: Allow reading a single ticket document.
      allow get: if canReadTicketById(ticketId);

      // LIST: Allow queries. The actual documents returned are still
      // checked by the `get` rule, but queries must be constrained in the client.
      allow list: if isSignedIn();

      // CREATE: Any authenticated user can create a ticket.
      allow create: if isSignedIn();
      
      // UPDATE: Only admins or assigned technicians can update.
      allow update: if isAdmin() || (isTech() && request.auth.uid in resource.data.get('assignedToIds', []));
    }

    // ========= SCHEDULE EVENTS =========
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isTech();
      allow update, delete: if isAdmin();
    }

    // ========= NOTIFICATIONS =========
    match /notifications/{notificationId} {
      // Owner can read, update, delete their own notification.
      allow get, update, delete: if isOwner(resource.data.userId);
      // Any signed-in user can create notifications (e.g., via backend logic).
      // Queries must be filtered by userId on the client.
      allow create, list: if isSignedIn();
    }

    // ========= LOGS (Audit Trail) =========
    match /logs/{logId} {
      // Readable if the user can read the related ticket, or is Admin/SST.
      allow get: if isAdmin() || isSST() || (resource.data.details.ticketId != null && canReadTicketById(resource.data.details.ticketId));
      // Queries must be filtered by the client.
      allow list: if isSignedIn();
      // Any authenticated user can create logs (typically via backend functions).
      allow create: if isSignedIn();
      // Logs are immutable.
      allow update, delete: if false;
    }

    // ========= MASTER DATA (Zones, Sites, Categories) =========
    match /zones/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /sites/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /categories/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }

    // ========= DIAGNOSIS LOGS =========
    match /diagnosis_logs/{id} {
      allow read, write: if isSignedIn();
    }
  }
}
