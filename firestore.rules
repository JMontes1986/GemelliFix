rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function userRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    function isAdmin() { return isSignedIn() && userRole(request.auth.uid) == 'Administrador'; }
    function isSST()   { return isSignedIn() && userRole(request.auth.uid) == 'SST'; }
    function isTech()  { return isSignedIn() && userRole(request.auth.uid) == 'Servicios Generales'; }

    function canReadTicketById(ticketId) {
      let ticketData = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      let assignedIds = ticketData.assignedToIds != null ? ticketData.assignedToIds : [];
      
      return isAdmin() || isSST()
        || (isTech() && request.auth.uid in assignedIds)
        || (isSignedIn() && request.auth.uid == ticketData.requesterId);
    }
    
    // USERS
    match /users/{userId} {
      allow get: if isSignedIn() && (isAdmin() || request.auth.uid == userId);
      allow list: if isAdmin();
      allow create: if isSignedIn()
                    && request.auth.uid == userId
                    && !exists(/databases/$(database)/documents/users/$(userId))
                    && request.resource.data.keys().hasOnly(["uid", "name", "email", "avatar", "role", "createdAt", "id"])
                    && request.resource.data.role in ["Docentes", "Coordinadores", "Administrativos"]
                    && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    // TICKETS
    match /tickets/{ticketId} {
      allow get: if canReadTicketById(ticketId);
      
      allow list: if 
        isAdmin() || isSST() ||
        (isTech() && request.query.where('assignedToIds', 'array-contains', request.auth.uid)) ||
        (isSignedIn() && request.query.where('requesterId', '==', request.auth.uid));

      allow create: if isSignedIn();
      
      allow update: if isAdmin()
        || (isTech() && request.auth.uid in (resource.data.assignedToIds || []));
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isTech();
      allow update, delete: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow get, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn() && request.query.where('userId', '==', request.auth.uid);
      allow create: if isSignedIn();
    }

    // LOGS
    match /logs/{logId} {
        allow get: if isAdmin() || isSST()
            || (resource.data.details.ticketId != null
                && canReadTicketById(resource.data.details.ticketId));

        allow list: if isAdmin() || isSST()
            || (isSignedIn() && request.query.where('details.ticketId', 'in', get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessibleTicketIds || []));
            
        allow create: if isSignedIn();
        allow update, delete: if false;
    }


    // DATA MASTER
    match /zones/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /sites/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /categories/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }

    // DIAGNOSIS
    match /diagnosis_logs/{id} {
      allow read, write: if isSignedIn();
    }
  }
}
