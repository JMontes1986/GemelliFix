
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read the full list of users.
      allow list: if isAdmin();
      
      // A user can read their own profile. Admins can read any profile.
      allow read: if isAdmin() || request.auth.uid == userId;
      
      // A user can update their own profile. Admins can update any profile.
      allow update: if isAdmin() || request.auth.uid == userId;
      
      // Only admins can create or delete users through this rule.
      // (Actual creation is handled by server-side logic).
      allow create, delete: if isAdmin();
    }

    // Rules for the 'tickets' collection
    match /tickets/{ticketId} {
      // Admins can read all tickets.
      // General Services can read tickets assigned to them.
      // Other users can read tickets they created.
      allow read: if isAdmin() || 
                  request.auth.uid in resource.data.assignedToIds ||
                  request.auth.uid == resource.data.requesterId;
                  
      // Allow listing of tickets based on specific queries.
      allow list: if request.auth != null;
                  
      // Any authenticated user can create a ticket.
      allow create: if request.auth != null;

      // Admins can update any ticket.
      // General Services can update tickets assigned to them.
      allow update: if isAdmin() || 
                    (request.auth.uid in resource.data.assignedToIds);

      // Only admins can delete tickets.
      allow delete: if isAdmin();
    }

    // Rules for the 'logs' collection
    match /logs/{logId} {
      // Only admins can read the full log history.
      allow read, list: if isAdmin();
      // Writing logs is handled by a secure server-side function,
      // but we allow any authenticated user to create a log entry as a fallback.
      allow create: if request.auth != null;
    }
    
    // Rules for general data collections
    match /zones/{zoneId} {
      // Anyone can read zones.
      allow read: if true;
      // Only admins can modify zones.
      allow write: if isAdmin();
    }
    
    match /sites/{siteId} {
        // Anyone can read sites.
        allow read: if true;
        // Only admins can modify sites.
        allow write: if isAdmin();
    }
    
    match /categories/{categoryId} {
        // Anyone can read categories.
        allow read: if true;
        // Only admins can modify categories.
        allow write: if isAdmin();
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
        // A user can read their own notifications.
        allow read, list: if request.auth.uid == resource.data.userId;
        // A user can update their own notifications (e.g., mark as read).
        allow update: if request.auth.uid == resource.data.userId;
        // Server-side logic handles creation.
        allow create: if request.auth != null;
    }
    
    // Rules for calendar events
    match /scheduleEvents/{eventId} {
        // Any authenticated user can read/list events (for the calendar view).
        allow read, list: if request.auth != null;
        // Only admins can create/update/delete events directly.
        // Technicians create events via specific logic handled by security rules on ticket updates.
        allow write: if isAdmin();
    }
    
     match /diagnosis_logs/{logId} {
      allow read, write: if request.auth != null;
    }
  }
}
