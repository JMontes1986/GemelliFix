rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Helper para obtener el rol del usuario actual desde su documento en Firestore
    function getMyRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getMyRole() == 'Administrador';
    }

    function isSST() {
      return isSignedIn() && getMyRole() == 'SST';
    }
    
    function isTech() {
      return isSignedIn() && getMyRole() == 'Servicios Generales';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function canReadTicketById(ticketId) {
      let ticketData = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      let assignedIds = ticketData.assignedToIds != null ? ticketData.assignedToIds : [];
      return isAdmin() || isSST()
        || (isTech() && request.auth.uid in assignedIds)
        || isOwner(ticketData.requesterId);
    }

    // --- REGLAS POR COLECCIÃ“N ---

    match /users/{userId} {
      // Un usuario puede leer su propio perfil. Un admin puede leer cualquiera.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      // Solo los admins pueden listar todos los usuarios.
      allow list: if isAdmin();
      // Un usuario puede crear su propio perfil por primera vez. Un admin puede crear cualquiera.
      allow create: if isOwner(userId) || isAdmin();
      // Un usuario puede actualizar su propio perfil. Un admin puede actualizar cualquiera.
      allow update: if isOwner(userId) || isAdmin();
      // Solo admins pueden borrar usuarios.
      allow delete: if isAdmin();
    }

    match /tickets/{ticketId} {
      // Permisos de lectura de un solo ticket
      allow get: if isSignedIn() && (
        isOwner(resource.data.requesterId) ||
        (isTech() && request.auth.uid in (resource.data.assignedToIds || [])) ||
        isAdmin() ||
        isSST()
      );
      
      // Permisos para listar/consultar tickets
      allow list: if isTech() || isAdmin() || isSST() || 
                  (isSignedIn() && request.query.where.requesterId == request.auth.uid);

      allow create: if isSignedIn();
      
      allow update: if isAdmin() || (isTech() && request.auth.uid in (resource.data.assignedToIds || []));
    }

    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isTech();
      allow update, delete: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow get, update, delete: if isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      allow create: if isSignedIn();
    }

    match /logs/{logId} {
      allow get: if isAdmin() || isSST() || (resource.data.details.ticketId != null && canReadTicketById(resource.data.details.ticketId));
      allow list: if isAdmin() || isSST(); // Simplificado para administradores
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
