rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función para obtener el rol del usuario que hace la petición.
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Reglas para la colección de Usuarios
    match /users/{userId} {
      // Un usuario puede leer su propio perfil.
      allow read: if request.auth.uid == userId;
      // Solo un Administrador puede crear o actualizar usuarios.
      allow create, update: if getUserRole() == 'Administrador';
    }
    
    // Reglas para la colección de Tickets
    match /tickets/{ticketId} {
      // REGLA DE LECTURA (GET): Quién puede leer un ticket INDIVIDUAL.
      allow get: if request.auth != null && 
                    (resource.data.requesterId == request.auth.uid ||
                     getUserRole() in ['Administrador', 'SST'] ||
                     (getUserRole() == 'Servicios Generales' && resource.data.assignedToIds.hasAny([request.auth.uid])));
      
      // REGLA DE LISTADO (LIST): Quién puede REALIZAR CONSULTAS sobre la colección.
      // Firestore aplicará las reglas de 'get' a los resultados de la consulta,
      // por lo que un usuario solo recibirá los tickets que tiene permiso para leer.
      allow list: if request.auth != null;
      
      // REGLA DE CREACIÓN (CREATE): Cualquier usuario autenticado puede crear un ticket.
      allow create: if request.auth != null;
      
      // REGLA DE ACTUALIZACIÓN (UPDATE): Solo Administradores y Servicios Generales.
      allow update: if request.auth != null && getUserRole() in ['Administrador', 'Servicios Generales'];
      
      // REGLA DE BORRADO (DELETE): Solo Administradores.
      allow delete: if request.auth != null && getUserRole() == 'Administrador';
    }
    
    // Reglas para Logs de Auditoría
    match /logs/{logId} {
      // Solo los administradores pueden ver los logs.
      allow read: if request.auth != null && getUserRole() == 'Administrador';
      // La creación de logs se maneja desde el backend (createLog),
      // pero se permite la creación a cualquier usuario autenticado como medida de seguridad.
      allow create: if request.auth != null;
      // Nadie puede modificar o borrar los logs.
      allow update, delete: if false;
    }
    
    // Reglas para Notificaciones
    match /notifications/{notificationId} {
        // Un usuario puede leer/actualizar sus propias notificaciones.
        allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;
        // La creación se gestiona desde el backend.
        allow create: if request.auth != null;
    }
    
    // Reglas para Eventos del Calendario
    match /scheduleEvents/{eventId} {
        // Administradores y Servicios Generales pueden leer/escribir en el calendario.
        allow read, write: if request.auth != null && getUserRole() in ['Administrador', 'Servicios Generales'];
    }

    // Reglas para Datos Maestros (Zonas, Sitios, Categorías)
    // Se asume que estos datos no son sensibles y pueden ser leídos por todos.
    // La escritura se limita a los administradores.
    match /zones/{zoneId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() == 'Administrador';
    }
    
    match /sites/{siteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() == 'Administrador';
    }
    
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() == 'Administrador';
    }
  }
}
