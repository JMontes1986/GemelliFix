
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // El rol ahora se lee desde los Custom Claims del token de autenticación.
    // Es más rápido, seguro y evita lecturas innecesarias a la base de datos.
    function userRole() {
      return request.auth.token.role;
    }

    function isRole(role) {
      return isSignedIn() && userRole() == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      // Leer: El propio usuario, un Admin, o un SST.
      allow read: if isSignedIn() && (isOwner(userId) || isRole('Administrador') || isRole('SST'));

      // Listar: Solo un Admin puede listar todos los usuarios.
      allow list: if isRole('Administrador');

      // Crear: Permite que un usuario cree su propio perfil una sola vez (auto-inicialización).
      allow create: if isSignedIn()
                    && isOwner(userId)
                    && !exists(/databases/$(database)/documents/users/$(userId))
                    // Define los únicos campos permitidos en la creación.
                    && request.resource.data.keys().hasOnly(
                        ["uid", "name", "email", "avatar", "role", "createdAt"]
                      )
                    // Solo permite crear usuarios con roles base desde el cliente.
                    && request.resource.data.role in ["Docentes", "Coordinadores", "Administrativos"]
                    && request.resource.data.uid == request.auth.uid;

      // Actualizar: Solo un Admin puede modificar un perfil.
      allow update: if isRole('Administrador');
      
      // Eliminar: Solo un Admin puede eliminar un perfil.
      allow delete: if isRole('Administrador');
    }

    // TICKETS
    match /tickets/{ticketId} {
      // Leer: Admin, SST, el solicitante, o un técnico asignado al ticket.
      allow read: if isRole('Administrador')
                  || isRole('SST')
                  || isOwner(resource.data.requesterId)
                  || (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds);

      // Crear: Cualquier usuario autenticado puede crear un ticket.
      allow create: if isSignedIn();
      
      // Listar: Cualquier usuario autenticado puede listar tickets (la seguridad se aplica en la consulta).
      allow list: if isSignedIn();

      // Actualizar: Un Admin, o un técnico asignado al ticket.
      allow update: if isRole('Administrador') || (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds);
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isRole('Servicios Generales');
      allow update, delete: if isRole('Administrador');
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isSignedIn(); // El servidor crea notificaciones en nombre del sistema.
    }

    // LOGS
    match /logs/{logId} {
      allow read: if isRole('Administrador') || isRole('SST'); // Simplificado: solo roles de auditoría leen logs.
      allow create: if isSignedIn(); // El servidor crea los logs.
      allow write: if false; // Nadie puede modificar o borrar logs.
    }

    // ZONES / SITES / CATEGORIES (Datos Maestros)
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    // DIAGNOSIS LOGS (Para la página de diagnóstico)
    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
