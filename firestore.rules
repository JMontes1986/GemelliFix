rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check user roles
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isInRole(roles) {
      return isSignedIn() && getUserRole() in roles;
    }

    // Rules for Users
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isInRole(['Administrador', 'Servicios Generales']));
      allow list: if isSignedIn() && isInRole(['Administrador', 'Servicios Generales']);
      allow create: if isSignedIn(); // Allows new user registration
      allow update: if isSignedIn() && request.auth.uid == userId;
    }

    // Rules for Tickets
    match /tickets/{ticketId} {
      // Create: Any authenticated user can create a ticket.
      allow create: if isSignedIn();
      
      // Read: 
      // - Admins and SST can read all tickets.
      // - Technicians can read tickets assigned to them.
      // - Requesters can read their own tickets.
      allow read: if isSignedIn() && 
                    (isInRole(['Administrador', 'SST']) || 
                     (resource.data.assignedToIds != null && request.auth.uid in resource.data.assignedToIds) ||
                     request.auth.uid == resource.data.requesterId);
      
      // Update:
      // - Admins can update any ticket.
      // - Technicians can update tickets assigned to them.
      // - Requesters can only edit if the status is 'Abierto' or 'Asignado'.
      allow update: if isSignedIn() &&
                      (isInRole(['Administrador']) || 
                       (isInRole(['Servicios Generales']) && request.auth.uid in resource.data.assignedToIds) ||
                       (request.auth.uid == resource.data.requesterId && resource.data.status in ['Abierto', 'Asignado']));
    }
    
    // Rules for Data Masters (Zones, Sites, Categories) - Readonly for most
    match /{collectionName}/{docId} where collectionName in ['zones', 'sites', 'categories'] {
      allow read: if isSignedIn();
      allow write: if isInRole(['Administrador']); // Only admins can create/update/delete
    }

    // Rules for Calendar Events
    match /scheduleEvents/{eventId} {
       allow read: if isSignedIn() && (isInRole(['Administrador', 'SST']) || request.auth.uid == resource.data.technicianId);
       allow list: if isSignedIn() && isInRole(['Administrador', 'Servicios Generales']);
       allow create: if isSignedIn() && (isInRole(['Administrador', 'Servicios Generales']));
       allow update, delete: if isSignedIn() && (isInRole(['Administrador']) || request.auth.uid == resource.data.technicianId);
    }
    
    // Rules for Notifications - Users can only see their own
    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn(); // System can create notifications
    }
    
    // Rules for Logs - Readonly for Admins/SST
    match /logs/{logId} {
      allow read: if isInRole(['Administrador', 'SST']);
      allow write: if isSignedIn(); // System/Functions can write logs
    }
    
    // Rules for diagnosis logs - for testing
    match /diagnosis_logs/{logId} {
        allow write: if isSignedIn();
    }
  }
}
