
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
        return hasRole('Administrador');
    }
    
    function isAssignedTo(ticketId) {
      return request.auth.uid in get(/databases/$(database)/documents/tickets/$(ticketId)).data.assignedToIds;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for 'tickets' collection
    match /tickets/{ticketId} {
      allow get, list: if isSignedIn() && (
                          request.auth.uid == resource.data.requesterId || 
                          request.auth.uid in resource.data.assignedToIds ||
                          isAdmin()
                        );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isAdmin() || isAssignedTo(ticketId));
      allow delete: if isAdmin();
    }

    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn(); // Can be created by server-side logic (functions) or other users
      allow delete: if isAdmin();
    }
    
    // Rules for 'logs' and 'diagnosis_logs' collections
    match /logs/{logId} {
        allow read: if isAdmin();
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

    match /diagnosis_logs/{logId} {
        allow read, create: if isSignedIn();
        allow update, delete: if false;
    }

  }
}
