rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Admin por custom claims (recomendado para evitar recursión)
    function isAdminByClaim() {
      return isSignedIn() &&
        (
          request.auth.token.admin == true ||          // si configuraste un booleano admin
          request.auth.token.role == 'Administrador'   // o un claim "role"
        );
    }

    // SOLO para otras colecciones (no la usaremos dentro de /users)
    function roleOf(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    function isRole(role) {
      return isSignedIn() && roleOf(request.auth.uid) == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // ---------- USERS ----------
    match /users/{userId} {
      // El dueño puede leer su perfil; admin (por claim) también.
      allow get: if isOwner(userId) || isAdminByClaim();

      // Listar usuarios solo admin por claim (no uses isRole aquí para evitar recursión)
      allow list: if isAdminByClaim();

      // Crear perfil: dueño o admin por claim
      allow create: if isOwner(userId) || isAdminByClaim();

      // Actualizar: dueño o admin por claim
      allow update: if isOwner(userId) || isAdminByClaim();

      // Borrar: solo admin por claim
      allow delete: if isAdminByClaim();
    }

    // ---------- TICKETS ----------
    function canReadTicket(ticketId) {
      let t = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      return isRole('Administrador') || isRole('SST') ||
             (isRole('Servicios Generales') && request.auth.uid in t.assignedToIds) ||
             (isSignedIn() && request.auth.uid == t.requesterId);
    }

    match /tickets/{ticketId} {
      // la regla de listado en la versión anterior era más segura, la restauramos
      allow get: if canReadTicket(ticketId);
       
      allow list: if
        isRole('Administrador') || isRole('SST') ||
        (isSignedIn()
          && request.query.where('requesterId', '==', request.auth.uid));

      allow create: if isSignedIn();
      allow update: if isRole('Administrador') ||
                     (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds);
    }

    // ---------- scheduleEvents / notifications / logs / zones / sites / categories ----------
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isRole('Servicios Generales');
      allow update, delete: if isRole('Administrador');
    }

    match /notifications/{notificationId} {
      allow get, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn();
      allow list: if isSignedIn() && request.query.where('userId', '==', request.auth.uid);
    }

    match /logs/{logId} {
      allow get: if canReadTicket(resource.data.details.ticketId);
      allow list: if isSignedIn() && request.query.where('details.ticketId', '==', resource.data.details.ticketId);
      allow create: if isSignedIn();
      allow write: if false;
    }

    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
