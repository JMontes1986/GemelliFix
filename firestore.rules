rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      // Un administrador puede leer el perfil de cualquier usuario para verificar el rol.
      return isSignedIn() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Administrador";
    }

    // USERS
    match /users/{userId} {
      // Listar todos los usuarios: solo permitido para administradores.
      allow list: if isAdmin();
      // Leer un perfil de usuario específico: permitido para cualquier usuario autenticado.
      allow get: if isSignedIn();
      // Crear un nuevo usuario: solo el propio usuario puede crear su documento (en el registro).
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Actualizar un perfil: permitido si es el propietario del perfil o si es un administrador.
      allow update: if (isSignedIn() && request.auth.uid == userId) || isAdmin();
      // Eliminar un usuario (no implementado, pero sería solo para administradores):
      // allow delete: if isAdmin();
    }

    // TICKETS
    match /tickets/{ticketId} {
      // Leer tickets: permitido para cualquier usuario autenticado (necesario para dashboards y listas).
      allow read: if isSignedIn();
      // Crear un ticket: permitido para cualquier usuario autenticado.
      allow create: if isSignedIn();
      // Actualizar un ticket: permitido para administradores o para el usuario que creó el ticket.
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.requesterId);
    }

    // ZONES & SITES
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // Solo los administradores pueden crear/editar/eliminar zonas.
    }
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // Solo los administradores pueden crear/editar/eliminar sitios.
    }

    // LOGS (Tanto en la raíz como en subcolecciones si existieran)
    match /logs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
    }
    match /{path=**}/logs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      // Crear notificación: cualquier proceso autenticado puede hacerlo (ej: una función o la app).
      allow create: if isSignedIn();
      // Leer, actualizar o eliminar: solo el usuario al que pertenece la notificación.
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // SCHEDULE EVENTS (CALENDARIO)
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      // Escribir (crear/actualizar): permitido si es admin o si es el técnico asignado al evento.
      allow write: if isAdmin() || (isSignedIn() && request.auth.uid == request.resource.data.technicianId);
    }

    // DIAGNOSIS LOGS
    match /diagnosis_logs/{logId} {
      allow create: if isSignedIn();
      allow read: if isAdmin();
    }
  }
}
