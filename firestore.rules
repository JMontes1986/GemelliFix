rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // --- Collections ---

    // USERS: Users can see basic info of others, but only edit their own profile. Admins can edit anything.
    match /users/{userId} {
      allow read: if isAuth();
      allow update: if isOwner(userId) || isRole('Administrador');
      allow create, delete: if isRole('Administrador');
    }

    // TICKETS: Granular permissions based on user role.
    match /tickets/{ticketId} {
      // Anyone logged in can create a ticket.
      allow create: if isAuth();

      // Read a single ticket if you are an Admin, SST, the requester, or assigned to it.
      allow get: if isOneOfRoles(['Administrador', 'SST']) 
                  || (isAuth() && resource.data.requesterId == request.auth.uid) 
                  || (isAuth() && request.auth.uid in resource.data.assignedToIds);

      // List tickets based on different queries for each role.
      allow list: if isOneOfRoles(['Administrador', 'SST']) // Admins/SST can list all.
                  // Technicians can query for tickets assigned to them.
                  || (isRole('Servicios Generales') && request.query.where.path == 'assignedToIds')
                  // Requesters can query for tickets they created.
                  || (isOneOfRoles(['Docentes', 'Coordinadores', 'Administrativos']) && request.query.where.path == 'requesterId');
      
      // Update if Admin, or assigned technician, or the original requester if ticket is still open.
      allow update: if isRole('Administrador') 
                    || (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds) 
                    || (isOwner(resource.data.requesterId) && resource.data.status == 'Abierto');
      
      // Only Admins can delete.
      allow delete: if isRole('Administrador');
    }

    // SCHEDULE: Admins can manage the calendar, others can read it.
    match /scheduleEvents/{eventId} {
      allow read: if isAuth();
      allow create, update, delete: if isRole('Administrador');
    }
    
    // NOTIFICATIONS: Users can manage their own notifications.
    match /notifications/{notificationId} {
      allow read, update, delete: if isAuth() && resource.data.userId == request.auth.uid;
      // Creation is handled by server-side logic (e.g., Cloud Functions).
      allow create: if isAuth();
    }

    // LOGS: Read-only for authorized users, write-only for backend.
    match /logs/{logId} {
      // A user can read the logs for a ticket if they are allowed to read that ticket.
      allow read: if isAuth() 
                  && exists(/databases/$(database)/documents/tickets/$(resource.data.details.ticketId))
                  && get(/databases/$(database)/documents/tickets/$(resource.data.details.ticketId)).data.requesterId == request.auth.uid
                  || isOneOfRoles(['Administrador', 'SST'])
                  || (request.auth.uid in get(/databases/$(database)/documents/tickets/$(resource.data.details.ticketId)).data.assignedToIds);

      allow write: if false; // Only backend can write logs.
    }
    
    // MASTER DATA (Zones, Sites, Categories): Read-only for users, writeable by Admins.
    match /zones/{zoneId} {
      allow read: if isAuth();
      allow write: if isRole('Administrador');
    }
    match /sites/{siteId} {
      allow read: if isAuth();
      allow write: if isRole('Administrador');
    }
    match /categories/{categoryId} {
      allow read: if isAuth();
      allow write: if isRole('Administrador');
    }
    
    // DIAGNOSIS: Write-only for authenticated users for testing purposes.
    match /diagnosis_logs/{logId} {
        allow write: if isAuth();
    }
  }
}
