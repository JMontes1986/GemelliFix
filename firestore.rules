
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isOneOfRoles(roles) {
      return isUserAuthenticated() && getUserRole() in roles;
    }

    function isOwner() {
      // Check if the requesterId of the document being read matches the user's UID.
      // This is used for 'get' operations on a single document.
      return request.auth.uid == resource.data.requesterId;
    }

    match /tickets/{ticketId} {
      // GET: Who can read a single, specific ticket document?
      allow get: if isUserAuthenticated() && 
                    (isOwner() || 
                     isOneOfRoles(['Administrador', 'SST']) || 
                     (request.auth.uid in resource.data.assignedToIds));

      // LIST: Who can query the tickets collection?
      // Admins/SST can list everything.
      // Others can ONLY list if their query is filtered by 'requesterId' or 'assignedToIds'.
      allow list: if isUserAuthenticated() && (
                    isOneOfRoles(['Administrador', 'SST']) ||
                    (request.query.where.path == "requesterId" && request.query.where.value == request.auth.uid) ||
                    (request.query.where.path == "assignedToIds" && request.query.where.arrayContains == request.auth.uid)
                  );

      // WRITE operations
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && isOneOfRoles(['Administrador', 'Servicios Generales']);
      allow delete: if isOneOfRoles(['Administrador']);
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOneOfRoles(['Administrador']);
      allow update: if request.auth.uid == userId || isOneOfRoles(['Administrador']);
      allow delete: if isOneOfRoles(['Administrador']);
    }

    match /zones/{zoneId} {
      allow read: if isUserAuthenticated();
      allow write: if isOneOfRoles(['Administrador']);
    }
    
    match /sites/{siteId} {
        allow read: if isUserAuthenticated();
        allow write: if isOneOfRoles(['Administrador']);
    }

    match /categories/{categoryId} {
        allow read: if isUserAuthenticated();
        allow write: if isOneOfRoles(['Administrador']);
    }
    
    match /scheduleEvents/{eventId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && isOneOfRoles(['Administrador', 'Servicios Generales']);
      allow update, delete: if isOneOfRoles(['Administrador']);
    }

    match /logs/{logId} {
      allow read: if isOneOfRoles(['Administrador']);
      allow create: if isUserAuthenticated(); // Anyone can create a log entry
    }

    match /notifications/{notificationId} {
      allow read, update: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isUserAuthenticated();
    }
    
    match /diagnosis_logs/{logId} {
        allow create: if isUserAuthenticated();
    }
  }
}
