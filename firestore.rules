
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';
    }

    match /users/{userId} {
      // Any authenticated user can read any single user profile.
      // This is necessary for Storage Rules to check roles.
      // Listing all users is still restricted to admins.
      allow get: if request.auth != null;
      
      // Admins can list all users.
      allow list: if isAdmin();
      
      // Allow users to create their own profile, and admins to create any.
      allow create: if request.auth != null;
      
      // Allow users to update their own profile, and admins to update any.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }
    
    match /tickets/{ticketId} {
      allow read, write: if request.auth != null;
    }
    
    match /zones/{zoneId} {
        allow read, write: if request.auth != null && isAdmin();
    }
    
    match /sites/{siteId} {
        allow read, write: if request.auth != null && isAdmin();
    }

    match /scheduleEvents/{eventId} {
      // Allow authenticated users (especially admins/technicians) to create/manage events
      allow read, write: if request.auth != null;
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }
    
     match /logs/{logId} {
      // Only admins should be able to read logs. No one should write directly.
      allow read: if request.auth != null && isAdmin();
      allow write: if false; // Logs should only be created from backend/functions
    }

    // This collection is just for testing connectivity. 
    // Any authenticated user can write to it.
    match /diagnosis_logs/{logId} {
        allow read, write: if request.auth != null;
    }
  }
}
