rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role via custom claims
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    match /users/{userId} {
      // An admin can do anything.
      // A user can update their own document.
      // Any authenticated user can read any profile.
      allow read, update: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      
      // Only admins can list all users or create new ones from the backend.
      allow list, create: if request.auth != null && isAdmin();
    }
    
    match /tickets/{ticketId} {
      // Any authenticated user can create a ticket.
      allow create: if request.auth != null;
      
      // Admins can read/update any ticket.
      // The user who requested it can read it.
      // A technician assigned to it can read it.
      allow read, update: if request.auth != null && (
        isAdmin() || 
        resource.data.requesterId == request.auth.uid ||
        request.auth.uid in resource.data.assignedToIds
      );
    }
    
    match /notifications/{notificationId} {
       // Admins and the target user can read/write notifications.
       allow read, write: if request.auth != null && (isAdmin() || resource.data.userId == request.auth.uid);
    }

    match /scheduleEvents/{eventId} {
      // Any authenticated user can create an event. (Handled by the app logic)
      allow create: if request.auth != null;

      // Any authenticated user can read all events.
      allow read: if request.auth != null;

      // Only admins or the assigned technician can update/delete an event.
      allow update, delete: if request.auth != null && (isAdmin() || resource.data.technicianId == request.auth.uid);
    }
    
    match /zones/{zoneId} {
       // Only admins can manage zones and sites.
       allow read, write: if request.auth != null && isAdmin();
    }

    match /sites/{siteId} {
       // Only admins can manage zones and sites.
       allow read, write: if request.auth != null && isAdmin();
    }

    match /logs/{logId} {
      // Only admins can read all logs.
      allow read: if request.auth != null && isAdmin();
      // App backend can write logs.
      allow create: if request.auth != null;
    }

     match /diagnosis_logs/{logId} {
      allow read, write: if request.auth != null;
    }
  }
}