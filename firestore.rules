rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user roles
    function isOneOfRoles(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    // Rules for USERS collection
    match /users/{userId} {
      // Any authenticated user can read their own profile.
      allow read: if request.auth != null && request.auth.uid == userId;
      // Only the user themselves or an admin can update their profile.
      allow update: if request.auth != null && (request.auth.uid == userId || isOneOfRoles(['Administrador']));
      // Only admins can create or delete users.
      allow create, delete: if isOneOfRoles(['Administrador']);
    }
    
    // Rules for TICKETS collection
    match /tickets/{ticketId} {
      // Read access is granted if:
      // 1. You are the requester.
      // 2. You are an Admin or SST.
      // 3. You are assigned to the ticket.
      allow read: if request.auth != null && (
          request.auth.uid == resource.data.requesterId ||
          isOneOfRoles(['Administrador', 'SST']) ||
          request.auth.uid in resource.data.assignedToIds
      );
      
      // Any authenticated user can create a ticket.
      allow create: if request.auth != null;
      
      // Updates are allowed if you are an Admin or assigned to the ticket.
      allow update: if request.auth != null && (
          isOneOfRoles(['Administrador']) ||
          request.auth.uid in resource.data.assignedToIds
      );
      
      // Only Admins can delete tickets.
      allow delete: if isOneOfRoles(['Administrador']);
    }

    // Rules for MASTER DATA collections (zones, sites, categories)
    match /{collectionName}/{docId} where collectionName in ['zones', 'sites', 'categories'] {
      // Anyone authenticated can read master data.
      allow read: if request.auth != null;
      // Only admins can create, update, or delete master data.
      allow write: if isOneOfRoles(['Administrador']);
    }

    // Rules for NOTIFICATIONS collection
    match /notifications/{notificationId} {
      // A user can read or update their own notifications.
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      // Notifications are created by server-side logic (Cloud Functions), not directly by clients.
      allow create: if isOneOfRoles(['Administrador']); // Admins can create for testing, but typically server-side
    }

    // Rules for SCHEDULE EVENTS collection
    match /scheduleEvents/{eventId} {
       // Any authenticated user can view calendar events
       allow read: if request.auth != null;
       // Only Admins and Service Staff can create, update or delete events.
       allow write: if isOneOfRoles(['Administrador', 'Servicios Generales']);
    }
    
    // Rules for LOGS collection
    match /logs/{logId} {
        // Only Admins and SST can read logs for auditing.
        allow read: if isOneOfRoles(['Administrador', 'SST']);
        // Logs are created by server-side logic. No client should write directly.
        // Allowing Admin to create for potential manual log entries or testing.
        allow create: if isOneOfRoles(['Administrador']);
        allow update, delete: if false; // Logs should be immutable.
    }
    
    // Rules for DIAGNOSIS LOGS (for testing connection)
    match /diagnosis_logs/{logId} {
        // Any authenticated user can write to this collection for testing purposes.
        allow write: if request.auth != null;
        // Only admins should be able to read or delete test logs.
        allow read, delete: if isOneOfRoles(['Administrador']);
    }
  }
}
