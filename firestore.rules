
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================================
    // Helper Functions
    // =============================================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserInRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }
    
    function isUserInAnyRole(roles) {
      return isSignedIn() && getUserData(request.auth.uid).role in roles;
    }


    // =============================================================
    // Collection: users
    // =============================================================
    match /users/{userId} {
      // cualquiera puede leer perfiles de usuario (para listas, etc.)
      allow read: if isSignedIn();
      // solo el admin puede crear usuarios (registro se maneja en el backend)
      allow create: if isUserInRole('Administrador');
      // el propio usuario o un admin puede actualizar su perfil
      allow update: if isUser(userId) || isUserInRole('Administrador');
      // solo un admin puede borrar usuarios
      allow delete: if isUserInRole('Administrador');
    }

    // =============================================================
    // Collection: tickets
    // =============================================================
    match /tickets/{ticketId} {
      // cualquiera autenticado puede crear un ticket
      allow create: if isSignedIn();
      
      // se puede leer si eres admin, el creador, o estás asignado
      allow read: if isSignedIn() && 
                    (isUserInRole('Administrador') || 
                     resource.data.requesterId == request.auth.uid ||
                     request.auth.uid in resource.data.assignedToIds);

      // se puede actualizar si eres admin o estás asignado
      allow update: if isSignedIn() && 
                      (isUserInRole('Administrador') || 
                       request.auth.uid in resource.data.assignedToIds);

      allow delete: if isUserInRole('Administrador');
    }

    // =============================================================
    // Collection: notifications
    // =============================================================
    match /notifications/{notificationId} {
        // Solo el backend puede crear notificaciones
        allow create: if isUserInRole('Administrador'); 
        // Solo el usuario destinatario puede leer y marcar como leída su notificación
        allow read, update: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow delete: if isUserInRole('Administrador');
    }

    // =============================================================
    // Collection: logs & diagnosis_logs
    // =============================================================
    match /logs/{logId} {
      // Los logs son de solo escritura desde el cliente (a través del backend)
      // y de solo lectura para administradores.
      allow create: if isSignedIn();
      allow read, list: if isUserInRole('Administrador');
      allow update, delete: if false; // Inmutables
    }

    match /diagnosis_logs/{logId} {
      // Cualquiera autenticado puede escribir para probar conexión.
      allow create: if isSignedIn();
      // Solo admins pueden leer los logs
      allow read: if isUserInRole('Administrador');
      allow update, delete: if false;
    }
  }
}
