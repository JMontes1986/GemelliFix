rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }
    
    function isOneOfRoles(roles) {
      return isSignedIn() && getUserData(request.auth.uid).role in roles;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }
    
    function canReadTicket(ticketId) {
        let ticket = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
        let userRole = getUserData(request.auth.uid).role;
        
        return (userRole == 'Administrador' || userRole == 'SST') ||
               (userRole == 'Servicios Generales' && request.auth.uid in ticket.assignedToIds) ||
               (isOwner(ticket.requesterId));
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isOwner(userId) || isRole('Administrador');
      allow create, delete: if isRole('Administrador');

      // Admin can list service personnel
      allow list: if isRole('Administrador');
    }

    match /tickets/{ticketId} {
      // Create: Anyone signed in can create a ticket.
      allow create: if isSignedIn();

      // Read: Admins/SST can read all. Technicians can read their assigned tickets. Requesters can read their own.
      allow get: if isSignedIn() && canReadTicket(ticketId);

      // List: Allow specific queries for different roles
      allow list: if isOneOfRoles(['Administrador', 'SST']);
      allow list: if isRole('Servicios Generales') && request.query.where.get('assignedToIds') != null;
      allow list: if isOneOfRoles(['Docentes', 'Coordinadores', 'Administrativos']) && request.query.where.get('requesterId') == request.auth.uid;

      // Update: Admins can update anything. Technicians can update their assigned tickets. 
      // Requester can only update if it's still 'Abierto'.
      allow update: if isRole('Administrador') || 
                     (isRole('Servicios Generales') && request.auth.uid in resource.data.assignedToIds) ||
                     (isOwner(resource.data.requesterId) && resource.data.status == 'Abierto');

      // Delete: Only Admins can delete.
      allow delete: if isRole('Administrador');
    }

    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isRole('Administrador');
    }

    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create: if isSignedIn(); // Backend services will create these
    }
    
    match /logs/{logId} {
        allow get: if isRole('Administrador');
        allow list: if isSignedIn() && request.query.where.get('details.ticketId') != null && canReadTicket(request.query.where.get('details.ticketId'));
        allow create: if isSignedIn(); // Log creation is handled by server/cloud function with trusted credentials
        allow update, delete: if false; // Logs are immutable from the client
    }
    
    // =================================
    // Master Data Collections
    // =================================
    
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isRole('Administrador');
    }
    
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isRole('Administrador');
    }

    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isRole('Administrador');
    }
    
    // For diagnosis page tests. Only authenticated users can write.
    match /diagnosis_logs/{logId} {
        allow read, write: if isSignedIn();
    }
  }
}
