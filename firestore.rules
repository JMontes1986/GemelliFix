rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función de utilidad para obtener los datos de rol de un usuario desde Firestore
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    
    // Reglas para la colección 'users'
    match /users/{userId} {
      // El usuario puede leer y escribir su propio perfil
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      
      // Nadie puede crear documentos de usuario directamente, deben crearse a través de la API del backend
      allow create: if false; 
      
      // El administrador puede listar, leer, actualizar y eliminar perfiles de usuario
      allow list, read, update, delete: if request.auth != null && getUserRole(request.auth.uid) == 'Administrador';
    }

    // Reglas para la colección 'tickets'
    match /tickets/{ticketId} {
      // Los usuarios autenticados pueden crear tickets
      allow create: if request.auth != null;
      
      // El solicitante del ticket puede leer y actualizar su propio ticket si el estado es 'Abierto'
      allow read, update: if request.auth != null && request.auth.uid == resource.data.requesterId && resource.data.status == 'Abierto';
      
      // Los usuarios asignados pueden leer y actualizar sus tickets
      allow read, update: if request.auth != null && request.auth.uid in resource.data.assignedToIds;

      // El administrador o SST pueden leer, actualizar y eliminar cualquier ticket
      allow read, update, delete: if request.auth != null && (getUserRole(request.auth.uid) == 'Administrador' || getUserRole(request.auth.uid) == 'SST');
    }
    
    // Reglas para la colección 'notifications'
    match /notifications/{notificationId} {
        // Un usuario solo puede leer/escribir sus propias notificaciones
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
        
        // Nadie puede listar notificaciones de forma masiva
        allow list: if false;
    }

    // Reglas para la colección 'zones', 'sites', 'categories'
    match /{collection}/{docId} where collection in ['zones', 'sites', 'categories'] {
      // Todos los usuarios autenticados pueden leer
      allow read: if request.auth != null;
      
      // Solo el administrador puede escribir
      allow write: if request.auth != null && getUserRole(request.auth.uid) == 'Administrador';
    }
    
    // Reglas para la colección 'scheduleEvents'
    match /scheduleEvents/{eventId} {
      // Los usuarios asignados o administradores pueden leer eventos
      allow read: if request.auth != null && (request.auth.uid == resource.data.technicianId || getUserRole(request.auth.uid) == 'Administrador');
      
      // Solo el administrador puede crear, actualizar o eliminar eventos
      allow write: if request.auth != null && getUserRole(request.auth.uid) == 'Administrador';
    }
    
    // Reglas para la colección 'logs'
    match /logs/{logId} {
      // Solo el administrador puede leer los logs
      allow read: if request.auth != null && getUserRole(request.auth.uid) == 'Administrador';
      
      // Nadie puede escribir directamente en los logs
      allow write: if false;
    }
    
    // Reglas para la colección 'diagnosis_logs'
    match /diagnosis_logs/{logId} {
        // Cualquiera puede escribir, solo para pruebas de diagnóstico
        allow write: if true;
        // Nadie debería poder leerlos
        allow read: if false;
    }
  }
}
