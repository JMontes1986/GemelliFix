rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    function userId() {
      return request.auth.uid;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isRole(role) {
      return isAuth() && getUserData(userId()).role == role;
    }

    function isAdmin() {
      return isRole('Administrador');
    }

    function isSST() {
      return isRole('SST');
    }
    
    function isTechnician() {
      return isRole('Servicios Generales');
    }

    function isOwner(docData) {
      return isAuth() && userId() == docData.requesterId;
    }
    
    function isAssigned(ticketData) {
      return isAuth() && userId() in ticketData.assignedToIds;
    }
    
    // Helper to check if a user can read a specific ticket
    function canReadTicket(ticketData) {
      return isAdmin() || isSST() || isOwner(ticketData) || isAssigned(ticketData);
    }
    

    // =================================
    // Collection Rules
    // =================================

    // Users collection
    match /users/{uid} {
      allow get: if isAuth();
      allow list: if isAdmin() && request.query.role == 'Servicios Generales';
      allow update: if isAuth() && (userId() == uid || isAdmin());
      // Create is handled by admin backend, delete is not allowed
      allow create, delete: if false;
    }

    // Tickets collection
    match /tickets/{ticketId} {
      allow create: if isAuth();
      allow get: if canReadTicket(resource.data);
      
      // Rules for LIST queries
      allow list: if 
        (isAdmin() || isSST()) ||
        (isTechnician() && request.query.assignedToIds.hasAny([userId()])) ||
        (isAuth() && request.query.requesterId == userId());
        
      allow update: if 
        (isAdmin()) || 
        (isTechnician() && isAssigned(resource.data)) ||
        (isOwner(resource.data) && resource.data.status == 'Abierto');
        
      allow delete: if isAdmin();
    }
    
    // Logs for tickets
    match /logs/{logId} {
       allow get: if canReadTicket(get(/databases/$(database)/documents/tickets/$(resource.data.details.ticketId)).data);
       allow list: if canReadTicket(get(/databases/$(database)/documents/tickets/$(request.query.ticketId)).data);
       allow create, update, delete: if false; // Only backend can write logs
    }

    // Schedule Events
    match /scheduleEvents/{eventId} {
      allow read: if isAuth();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read, update: if isAuth() && userId() == resource.data.userId;
      allow list: if isAuth() && request.query.userId == userId();
      allow create, delete: if false; // Only backend can write notifications
    }
    
    // Zonas, Sitios, Categorias (Admin managed)
    match /{collectionName}/{docId} 
      where collectionName in ['zones', 'sites', 'categories'] {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
    
    // Diagnosis Logs (Only for testing)
     match /diagnosis_logs/{logId} {
      allow read, write: if isAuth();
    }
  }
}
