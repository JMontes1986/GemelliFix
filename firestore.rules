
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function userRole() {
      return isSignedIn()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }

    function isRole(role) {
      return userRole() == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Permiso de lectura del ticket por ID (para reutilizar en logs)
    function canReadTicketId(ticketId) {
      let t = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      return isRole("Administrador")
          || isRole("SST")
          || (isRole("Servicios Generales") && request.auth.uid in t.assignedToIds)
          || (t.requesterId == request.auth.uid);
    }

    // USERS
    match /users/{userId} {
      // El dueño puede leerse, Admin y SST también (útil para auditoría y layout)
      allow read: if isSignedIn() && (isOwner(userId) || isRole("Administrador") || isRole("SST"));
      allow create, update, delete: if isRole("Administrador");
      allow list: if isRole("Administrador");
    }

    // TICKETS
    match /tickets/{ticketId} {
      allow read: if isSignedIn() && (
        isRole("Administrador") ||
        isRole("SST") ||
        (isRole("Servicios Generales") && request.auth.uid in resource.data.assignedToIds) ||
        (resource.data.requesterId == request.auth.uid) // Docentes/Coordinadores/Administrativos leen los suyos
      );

      // Solo Admins y SST pueden listar la colección completa. Otros roles deben usar queries filtradas que se validan con la regla 'read'.
      allow list: if isRole("Administrador") || isRole("SST");

      // Todos los roles autenticados pueden crear
      allow create: if isSignedIn() && (
        isRole("Administrador") ||
        isRole("SST") ||
        isRole("Servicios Generales") ||
        isRole("Docentes") ||
        isRole("Coordinadores") ||
        isRole("Administrativos")
      );

      // Actualizar: Admin o técnico asignado; (opcional) el solicitante puede actualizar ciertos campos si así lo deseas
      allow update: if isSignedIn() && (
        isRole("Administrador") ||
        (isRole("Servicios Generales") && request.auth.uid in resource.data.assignedToIds)
        // si quieres permitir que el solicitante edite algunos campos, añade validaciones aquí
      );

      allow delete: if isRole("Administrador");
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn() && (
        isRole("Administrador") || isRole("SST") || isRole("Servicios Generales")
      );
      allow create: if isRole("Administrador") || isRole("Servicios Generales");
      allow update, delete: if isRole("Administrador");
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow list: if isSignedIn();
    }

    // LOGS
    match /logs/{logId} {
      // Se puede leer un log si el usuario puede leer el ticket al que hace referencia
      allow read: if isSignedIn() && (
        (resource.data.details.ticketId != null && canReadTicketId(resource.data.details.ticketId))
        || isRole("Administrador")
        || isRole("SST")
      );
      allow list: if isSignedIn(); // Para poder consultar por ticketId; cada doc validará read arriba
      allow create: if isSignedIn(); // generados por el sistema/cliente autenticado
      allow write: if false; // Inmutables salvo creación
    }

    // DATA MASTER
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole("Administrador");
    }
    
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole("Administrador");
    }
    
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole("Administrador");
    }

    // DIAGNOSIS LOGS
    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
