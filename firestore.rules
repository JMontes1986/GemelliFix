
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Regla para la colección de usuarios
    match /users/{userId} {
      // Un usuario autenticado puede leer su propio perfil.
      // Un administrador puede leer el perfil de cualquier usuario.
      allow get: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador');
      
      // Un administrador puede ver la lista completa de usuarios.
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';

      // Un usuario autenticado puede actualizar su propio perfil.
      // Un administrador puede actualizar el perfil de cualquier usuario.
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador');

      // Solo un administrador puede crear o eliminar usuarios.
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';
    }

    // Reglas para la colección de tickets
    match /tickets/{ticketId} {
        // El solicitante, el personal asignado y los administradores pueden leer el ticket.
        allow read: if request.auth != null && (resource.data.requesterId == request.auth.uid || request.auth.uid in resource.data.assignedToIds || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador');
        
        // Un usuario autenticado puede crear un ticket.
        allow create: if request.auth != null;

        // El solicitante, el personal asignado y los administradores pueden actualizar el ticket.
        // Se podrían añadir reglas más específicas por campo aquí.
        allow update: if request.auth != null && (resource.data.requesterId == request.auth.uid || request.auth.uid in resource.data.assignedToIds || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador');
    }
    
    // Reglas para colecciones de configuración (zonas, sitios)
    match /zones/{zoneId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';
    }

    match /sites/{siteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';
    }

    // Reglas para la colección de logs
    match /logs/{logId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';
        allow create: if request.auth != null;
    }

    // Reglas para la colección de notificaciones
    match /notifications/{notificationId} {
        allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;
        allow create: if request.auth != null; // Permitir que las funciones o el servidor creen notificaciones
    }
    
    // Reglas para la colección de eventos del calendario
    match /scheduleEvents/{eventId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && (resource.data.technicianId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador');
    }

    match /diagnosis_logs/{logId} {
        allow read, write: if request.auth != null;
    }
  }
}
