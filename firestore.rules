rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrador';
    }

    // Helper function to check if the user is the requester of a ticket
    function isRequester(ticket) {
      return request.auth.uid == ticket.requesterId;
    }

    // Helper function to check if the user is assigned to a ticket
    function isAssigned(ticket) {
      return request.auth.uid in ticket.assignedToIds;
    }

    // Users can read public profiles, but only edit their own.
    match /users/{userId} {
      allow read;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    // Tickets have specific rules based on roles
    match /tickets/{ticketId} {
      allow create: if request.auth != null;
      allow read, update: if isAdmin() || isRequester(resource.data) || isAssigned(resource.data);
    }
    
    // Logs are write-only for authenticated users to maintain integrity.
    match /logs/{logId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false; // Nobody can alter logs
    }
    
    // Notifications can be read and updated (to be marked as read) by the target user.
    match /notifications/{notificationId} {
        allow create: if isAdmin(); // Only admins/system can create notifications
        allow read, update: if request.auth.uid == resource.data.userId;
        allow delete: if false;
    }
    
    // Default deny for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
