
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // ==================
    // Helper Functions
    // ==================
    function isAuth() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuth() && getUserData().role == 'Administrador';
    }
    
    function isRequester(ticket) {
      return isAuth() && request.auth.uid == ticket.requesterId;
    }
    
    function isAssigned(ticket) {
      return isAuth() && request.auth.uid in ticket.assignedToIds;
    }

    // ==================
    // Collection Rules
    // ==================
    match /users/{userId} {
      // Admins can manage any user.
      // Authenticated users can read/update their own profile.
      allow read, update: if isAdmin() || (isAuth() && request.auth.uid == userId);
      allow create: if isAuth(); // Allow user creation via registration form
      allow delete: if isAdmin();
    }

    match /tickets/{ticketId} {
      // READ: Admins, the original requester, or an assigned technician can read a ticket.
      allow read: if isAdmin() || isRequester(resource.data) || isAssigned(resource.data);
      
      // CREATE: Any authenticated user can create a ticket.
      allow create: if isAuth();
      
      // UPDATE: Granular control based on user role and ticket status.
      allow update: if 
            // Admins can update any field.
            isAdmin() ||
            
            // Assigned technicians can update status to 'En Progreso' or 'Resuelto', and add attachments.
            (isAssigned(resource.data) && 
                (request.resource.data.status == 'En Progreso' || request.resource.data.status == 'Resuelto') &&
                request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'attachments', 'updatedAt'])) ||

            // The requester can update status to 'Cerrado' (approve) or 'Asignado' (reject) when it requires approval.
            (isRequester(resource.data) && 
                resource.data.status == 'Requiere Aprobaci√≥n' &&
                (request.resource.data.status == 'Cerrado' || request.resource.data.status == 'Asignado') &&
                request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));
                      
      // DELETE: Only admins can delete tickets.
      allow delete: if isAdmin();
    }
    
    match /notifications/{notificationId} {
       // A user can read or update their own notifications (e.g., mark as read).
       allow read, update: if isAuth() && request.auth.uid == resource.data.userId;

       // A user can only create a notification for themselves.
       // This prevents users from spamming others. Notification creation is handled server-side by the app logic.
       allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
       
       allow delete: if false; // Notifications should not be deletable by clients.
    }

    match /diagnosis_logs/{logId} {
        // Any authenticated user can create a diagnosis log.
        allow create: if isAuth();
        // Nobody can read, update, or delete logs from the client.
        allow read, update, delete: if false;
    }
  }
}

    