rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function myRole() {
      // Lee el rol desde los custom claims del token de autenticación.
      // Es más seguro y eficiente que leer desde Firestore en cada regla.
      return request.auth.token.role;
    }

    function isRole(role) {
      return isSignedIn() && myRole() == role;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      // Leer: dueño, Admin o SST.
      allow read: if isSignedIn() && (isOwner(userId) || isRole('Administrador') || isRole('SST'));

      // Listar: solo Admin.
      allow list: if isRole('Administrador');

      // Crear: permitir una auto-inicialización segura (una sola vez) por el dueño.
      allow create: if isSignedIn()
                    && isOwner(userId)
                    && !exists(/databases/$(database)/documents/users/$(userId))
                    && request.resource.data.keys().hasOnly(
                        ["uid", "name", "email", "avatar", "role", "createdAt"]
                      )
                    // Rol inicial permitido (nunca Admin/SST/SG por el cliente).
                    && request.resource.data.role in ["Docentes", "Coordinadores", "Administrativos"]
                    && request.resource.data.uid == request.auth.uid;

      // Actualizar/Eliminar: solo Admin.
      allow update, delete: if isRole('Administrador');
    }

    // TICKETS
    match /tickets/{ticketId} {
      // Regla de lectura corregida:
      // - No usa get(), que falla en operaciones de 'list'.
      // - Usa 'resource.data' para acceder a los campos del documento que se está evaluando.
      // - Añade defensas para campos que podrían ser nulos.
      allow read: if isRole('Administrador')
                  || isRole('SST')
                  || (isOwner(resource.data.requesterId))
                  || (
                       isRole('Servicios Generales') &&
                       resource.data.assignedToIds != null && // Chequeo de nulidad
                       request.auth.uid in resource.data.assignedToIds
                     );

      // 'list' concede permiso a la consulta, pero 'read' se evalúa en cada doc.
      // La seguridad se delega a las queries de la app (where clauses).
      allow list: if isSignedIn();

      allow create: if isSignedIn();

      allow update: if isRole('Administrador')
                    || (
                         isRole('Servicios Generales') &&
                         request.auth.uid in resource.data.assignedToIds
                       );
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isRole('Servicios Generales');
      allow update, delete: if isRole('Administrador');
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isSignedIn();
      allow list: if isSignedIn();
    }

    // LOGS
    match /logs/{logId} {
      // La lectura de logs es solo para roles de supervisión.
      // Los usuarios normales no deberían poder leer el historial completo.
      allow read: if isRole('Administrador') || isRole('SST');
      allow list: if isRole('Administrador') || isRole('SST');
      allow create: if isSignedIn(); // Cualquiera puede escribir su propio log.
    }

    // ZONES / SITES / CATEGORIES (Datos Maestros)
    match /zones/{zoneId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /sites/{siteId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }
    match /categories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if isRole('Administrador');
    }

    // DIAGNOSIS LOGS (Para la página de diagnóstico)
    match /diagnosis_logs/{logId} {
      allow read, write: if isSignedIn();
    }
  }
}
