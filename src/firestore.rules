rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // OJO: Estos helpers usan get() sobre /users; no los uses para leer /users/{userId}
    function userRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    function isAdmin() { return isSignedIn() && userRole(request.auth.uid) == 'Administrador'; }
    function isSST()   { return isSignedIn() && userRole(request.auth.uid) == 'SST'; }
    function isTech()  { return isSignedIn() && userRole(request.auth.uid) == 'Servicios Generales'; }
    
    function canReadTicketById(ticketId) {
      let t = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      return isAdmin() || isSST()
        || (isTech() && request.auth.uid in (t.assignedToIds || []))
        || (isSignedIn() && request.auth.uid == t.requesterId);
    }


    match /users/{userId} {
        // Cualquiera autenticado puede leer perfiles (get/stream); las consultas (list) solo admin
        allow get, read: if isSignedIn();
        allow list: if isAdmin();

        // ⚠️ Clave: permitir que el propio usuario cree su documento inicial
        allow create: if isAdmin() || isOwner(userId);
        
        // (opcional) permitir que cada usuario ACTUALICE datos “seguros” de su perfil
        allow update: if isAdmin() || isOwner(userId);

        allow delete: if isAdmin();
    }


    // TICKETS
    match /tickets/{ticketId} {
      // Lectura de UN doc (get / onSnapshot(doc))
      allow get: if isAdmin() || isSST()
        || (isTech() && request.auth.uid in (resource.data.assignedToIds || []))
        || (isSignedIn() && request.auth.uid == resource.data.requesterId);

      // Consultas y lecturas de colección
      allow list: if
        isAdmin() || isSST() ||
        // Solicitantes/Coordinaciones/Administrativos: la query DEBE filtrar por su uid
        (isSignedIn()
          && request.query.where('requesterId', '==', request.auth.uid));

      allow create: if isSignedIn();

      allow update: if isAdmin()
        || (isTech() && request.auth.uid in (resource.data.assignedToIds || []));
    }


    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isTech();
      allow update, delete: if isAdmin();
    }

    // NOTIFICATIONS (cada usuario solo ve las suyas)
    match /notifications/{notificationId} {
      allow get, update, delete: if isSignedIn()
        && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn()
        && request.query.where('userId', '==', request.auth.uid);
      allow create: if isSignedIn();
    }

    // LOGS (auditoría)
    match /logs/{logId} {
      // Un log es legible si puedes leer el ticket relacionado o eres Admin/SST
      allow get: if isAdmin() || isSST()
        || (resource.data.details.ticketId != null
            && canReadTicketById(resource.data.details.ticketId));
      // En consultas, al menos pide logs del ticket que sí puedes leer
      allow list: if isAdmin() || isSST()
        || (request.query.where('details.ticketId', '==', request.resource.data.details.ticketId)
            && canReadTicketById(request.resource.data.details.ticketId));
      allow create: if isSignedIn();
      allow update, delete: if false;
    }


    // DATA MASTER
    match /zones/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /sites/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /categories/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }

    // DIAGNOSIS
    match /diagnosis_logs/{id} {
      allow read, write: if isSignedIn();
    }
  }
}
