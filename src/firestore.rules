
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      // Directamente usa el custom claim del token, es más seguro y eficiente.
      return isSignedIn() && request.auth.token.role == role;
    }

    function isAdmin() { return isRole('Administrador'); }
    function isSST() { return isRole('SST'); }
    function isTech() { return isRole('Servicios Generales'); }

    // USERS
    match /users/{userId} {
      // Un usuario puede leer su propio perfil. El admin puede leer cualquiera.
      allow get: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      // Solo el admin puede listar todos los usuarios.
      allow list: if isAdmin();
      // Solo el admin puede crear/actualizar/eliminar perfiles.
      // La creación de un perfil por el propio usuario al registrarse se maneja
      // en la Cloud Function 'onUserCreated' de forma segura.
      allow write: if isAdmin();
    }

    // TICKETS
    match /tickets/{ticketId} {
      // PERMISOS DE LECTURA (GET - para un solo documento)
      allow get: if 
        isSignedIn() && (
          isAdmin() || 
          isSST() ||
          // El dueño del ticket puede leerlo.
          request.auth.uid == resource.data.requesterId ||
          // Un técnico asignado puede leerlo.
          (isTech() && request.auth.uid in (resource.data.assignedToIds || []))
        );

      // PERMISOS DE CONSULTA (LIST - para colecciones)
      allow list: if
        // Admin y SST pueden listar todos los tickets sin restricciones.
        isAdmin() || isSST() ||
        // Los técnicos pueden listar los tickets que tienen asignados.
        (isTech() && request.query.where('assignedToIds', 'array-contains', request.auth.uid)) ||
        // Los solicitantes DEBEN filtrar por su propio ID para poder listar.
        (isSignedIn() && request.query.where('requesterId', '==', request.auth.uid));

      // PERMISOS DE ESCRITURA
      allow create: if isSignedIn();
      allow update: if 
        isAdmin() || 
        (isTech() && request.auth.uid in (resource.data.assignedToIds || []));
      
      allow delete: if isAdmin();
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isTech();
      allow update, delete: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow get, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn() && request.query.where('userId', '==', request.auth.uid);
      allow create: if isSignedIn();
    }

    // LOGS (AUDIT)
    match /logs/{logId} {
        // Cualquiera autenticado puede crear logs. La lectura es restringida.
        allow create: if isSignedIn();
        // Solo Admin y SST pueden leer cualquier log.
        allow read, list: if isAdmin() || isSST();
        // Nadie puede modificar o borrar logs.
        allow update, delete: if false;
    }

    // MASTER DATA (Zonas, Sitios, Categorías)
    match /zones/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /sites/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /categories/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }

    // DIAGNOSIS LOGS
    match /diagnosis_logs/{id} {
      allow read, write: if isSignedIn();
    }
  }
}
