
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    function isUserInRole(role) {
        return isUserAuthenticated() && getUserData(request.auth.uid).role == role;
    }
    
    function isUserInAnyRole(roles) {
        return isUserAuthenticated() && getUserData(request.auth.uid).role in roles;
    }
    
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && (request.auth.uid == userId || isUserInRole('Administrador'));
      allow list: if isUserInRole('Administrador');
    }

    match /tickets/{ticketId} {
      allow create: if isUserAuthenticated();
      allow read: if isUserAuthenticated() && (isUserInAnyRole(['Administrador', 'SST', 'Servicios Generales']) || request.auth.uid == resource.data.requesterId);
      allow update: if isUserAuthenticated() && (isUserInAnyRole(['Administrador', 'Servicios Generales']) || request.auth.uid == resource.data.requesterId);
      allow list: if isUserAuthenticated();
    }
    
    match /zones/{zoneId} {
        allow read: if isUserAuthenticated();
        allow create, update: if isUserInRole('Administrador');
    }

    match /sites/{siteId} {
        allow read: if isUserAuthenticated();
        allow create, update: if isUserInRole('Administrador');
    }
    
    match /categories/{categoryId} {
        allow read: if isUserAuthenticated();
        allow create, update: if isUserInRole('Administrador');
    }

    match /notifications/{notificationId} {
        allow read, update: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
        allow list: if isUserAuthenticated();
    }
    
    match /scheduleEvents/{eventId} {
        allow read: if isUserAuthenticated();
        allow create, update, delete: if isUserAuthenticated() && isUserInRole('Administrador');
    }

    match /requisitions/{requisitionId} {
        allow create, read, list, update: if isUserAuthenticated() && isUserInRole('Administrador');
    }
    
    match /logs/{logId} {
        allow read: if isUserInRole('Administrador');
        allow create: if isUserAuthenticated();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
