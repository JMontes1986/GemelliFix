rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isAdmin() { return isRole('Administrador'); }
    function isSST() { return isRole('SST'); }
    function isTech() { return isRole('Servicios Generales'); }

    // USERS
    // Regla simplificada para permitir siempre al dueño leer/escribir su propio documento.
    match /users/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
      allow list, delete: if isAdmin(); // Solo admins pueden listar o borrar usuarios.
    }

    // TICKETS
    match /tickets/{ticketId} {
      function isTicketOwner() {
        return isSignedIn() && request.auth.uid == resource.data.requesterId;
      }
      function isTicketAssignedTech() {
        return isTech() && request.auth.uid in resource.data.assignedToIds;
      }
      
      allow get: if isTicketOwner() || isTicketAssignedTech() || isAdmin() || isSST();
      
      allow list: if isSignedIn(); // Se filtra en el cliente, pero la regla get/read por documento asegura la privacidad.
      
      allow create: if isSignedIn();
      
      allow update: if isAdmin() || isTicketAssignedTech();
    }

    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isTech();
      allow update, delete: if isAdmin();
    }

    // NOTIFICATIONS (cada usuario solo ve las suyas)
    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn() && request.query.where('userId', '==', request.auth.uid);
      allow create: if isSignedIn();
    }

    // LOGS (auditoría)
    match /logs/{logId} {
      allow read, create: if isSignedIn(); // Simplificado para permitir la escritura y lectura si está logueado. La privacidad se maneja en el cliente.
      allow list: if isAdmin() || isSST();
      allow update, delete: if false;
    }

    // DATA MASTER
    match /zones/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /sites/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /categories/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }

    // DIAGNOSIS
    match /diagnosis_logs/{id} {
      allow read, write: if isSignedIn();
    }
  }
}
