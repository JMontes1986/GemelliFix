rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // OJO: Estos helpers usan get() sobre /users; no los uses para leer /users/{userId}
    function userRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    function isAdmin() { return isSignedIn() && userRole(request.auth.uid) == 'Administrador'; }
    function isSST()   { return isSignedIn() && userRole(request.auth.uid) == 'SST'; }
    function isTech()  { return isSignedIn() && userRole(request.auth.uid) == 'Servicios Generales'; }

    // ========= USERS =========
    match /users/{userId} {
      // Leer SIEMPRE permitido al dueño de su doc (sin llamar isRole para evitar recursión)
      // y permitido a admin cuando lee docs de OTROS
      allow get, read: if isOwner(userId) || (userId != request.auth.uid && isAdmin());

      // List/queries solo admin
      allow list: if isAdmin();

      // Crear doc inicial: dueño o admin
      allow create: if isOwner(userId) || isAdmin();

      // Actualizar: dueño o admin
      allow update: if isOwner(userId) || isAdmin();

      // Borrar: solo admin
      allow delete: if isAdmin();
    }

    // ========= TICKETS =========
    function canReadTicket(ticketId) {
      let t = get(/databases/$(database)/documents/tickets/$(ticketId)).data;
      return isRole('Administrador')
          || isRole('SST')
          || (isRole('Servicios Generales') && request.auth.uid in (t.assignedToIds || []))
          || (isOwner(t.requesterId));
    }

    match /tickets/{ticketId} {
      allow read: if canReadTicket(ticketId);
      allow create: if isSignedIn();
      allow update: if isRole('Administrador')
                 || (isRole('Servicios Generales') && request.auth.uid in (resource.data.assignedToIds || []));
      // Las queries (list) siguen abiertas a autenticados, pero la regla read filtra por doc.
      allow list: if isSignedIn();
    }
    
    // SCHEDULE EVENTS
    match /scheduleEvents/{eventId} {
      allow read: if isSignedIn();
      allow create: if isRole('Administrador') || isTech();
      allow update, delete: if isAdmin();
    }

    // NOTIFICATIONS (cada usuario solo ve las suyas)
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isSignedIn();
      allow list: if isSignedIn() && request.query.where('userId', '==', request.auth.uid);
    }

    // LOGS (auditoría)
    match /logs/{logId} {
      allow read: if isRole('Administrador') || isSST() || (resource.data.details.ticketId != null && canReadTicket(resource.data.details.ticketId));
      allow list: if isRole('Administrador') || isSST() || (isSignedIn() && request.query.where('details.ticketId', '==', resource.data.details.ticketId));
      allow create: if isSignedIn();
      allow write: if false;
    }

    // DATA MASTER
    match /zones/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /sites/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /categories/{id} { allow read: if isSignedIn(); allow write: if isAdmin(); }

    // DIAGNOSIS
    match /diagnosis_logs/{id} {
      allow read, write: if isSignedIn();
    }
  }
}
